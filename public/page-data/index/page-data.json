{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"b60ed14e-bdf7-5a1b-8e93-665bd3d2bc7f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = themes.dark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"An Intro to Git and Github and Why You Should Git\")), mdx(\"h1\", null, \"An Intro to Git and Github\"), mdx(\"h2\", null, \"and Why You Should \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"Git\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Why Git and Github?\"), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, mdx(\"code\", null, \"Git\"), \", A Distributed Version Control System, is very flexible, smart, and intuitive. it is also an industry standard among developers and designers.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, mdx(\"code\", null, \"Github\"), \" provides hosting for software development version control using Git. It is a subsidiary of Microsoft, which acquired Github in 2018 for $7.5 billion. It offers all of the distributed version control and source code management functionality of Git as well as adding its own features. It is probably the most accessibly social and most widely used Git hosting provider.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Short History of Git\"), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Git was created in 2005 by Linus Torvalds for the development of the Linux kernel.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"The Linux kernel is the main component of the Linux operating system (OS) and the core interface between a computer's hardware and its processes. It communicates between the two, managing resources as efficiently as possible.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"The Linux kernel is a large open source. During most of the time that the Linux kernel was maintained (1992-2002), changes to the software were passed around as patches and archived files. In 2002, the kernel project began using a proprietary Distributed Version Control System (DVCS) called Bitkeeper.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed Bitkeeper broke down, and the tool's free of charge status was revoked. This got Linus Torvalds to create his own tool based on what he learned from working with BitKeeper.\"), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      width: '90%'\n    }\n  }, mdx(\"p\", null, \"Some of his goals in creating this new tool were:\"), mdx(\"ul\", null, mdx(\"li\", null, \"Speed\"), mdx(\"li\", null, \"Simple design\"), mdx(\"li\", null, \"Strong support for non-linear development (thousands of parallel branches)\"), mdx(\"li\", null, \"Fully distributed\"), mdx(\"li\", null, \"Able to handle large projects like the Linux kernel efficiently (speed and data size)\"))), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Since 2005, Git has evolved into an easy to use tool and still retains these original qualities Linus Torvalds sought to achieve. It is very fast, efficient with large projects, and has an incredible branching system for non-linear development.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    style: {\n      width: '90%',\n      textAlign: 'center'\n    }\n  }, \"Centralized vs Distributed Version Control\"), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"So what is centralized version control, distributed version control, and why use distributed version control such as Git instead?\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Centralized Version Control\"), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"A centralized version control system works on a client-server model.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"There is a single, centralized, master copy of the code base, and pieces of the code that developers are working on are typically locked, or checked out, so that ONLY one developer is allowed to work on that part of the code at any one time.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Access to the code base and lock down is controlled by the server. When the developer checks their code back in, the lock down is released so it's available to other developers to check out.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"A key part of any Version Control System (VCS) is the ability to keep track of changes that are made to the code. When a piece is checked in, a new version of that piece is created and entered or \", mdx(\"code\", null, \"logged\"), \".\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"When everyone has finished working on their own piece(s) of the whole, and it's time for a new release (version) of the application, a new version is created. That usually means entering the version numbers of all the parts that make up the application to make that version of the application.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Best known Centralized Version Control Systems are \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Concurrent_Versions_System\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  }, \"Concurrent Version System\"), \", and \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Apache_Subversion\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  }, \"Apache Subversion\"), \".\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"The best known Distributed version Control Systems are \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Git\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  }, \"Git\"), \" and \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Mercurial\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  }, \"Mercurial\"), \". We will be focusing on Git in this course, as it is the most popular to use and an industry standard.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Differences between CVCS and DVCS\"), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"There is no lockdown of code in a DVCS.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"What does this mean? More than one developer, in fact any number of developers, can be working on the code at any given time.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Every set of new changes that a developer makes to the code contains all the history of the code at the point in time he or she grabbed it from the remote repository and the new history created from the new changes he or she makes locally.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"In other words, each developer has his/her own copy of the complete project in its current state at the time each developer grabs a copy or clones it locally, meaning to their desktop.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"When they are done with their changes, they don't have to wait for the last person who checked out the code to check it back in as with CVC. They can simply check it back in, or rather, push it to remote whenever they want. This has certain implications which I will discuss a bit later.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"The performance of DVCS is better. There is no waiting for lockdowns to be unlocked across potentially slow networks or networks which aren't online at all. In addition, as mentioned previously, the complete code as it's represented remotely at a given time, is on each developer's local system.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Branching and merging of repositories is much easier to achieve in a DVCS because they are built into the system itself. We will see practical application of that when we set ourselves up with Git and Github and push our project from from our local computer to remote.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"With a DVCS, you don't need to be connected to a network all the time. Only when you want to view your changes via \", mdx(\"code\", null, \"localhost\"), \". I'll explain that as well via demonstration.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"CVCS PROs\"), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"CVCS are purportedly easier to understand. I have never worked with one, so I personally can't attest to that.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Access control is easier, since everything is controlled from one place. That CAN be true.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"This really pertains to the potential for conflicts that arise when developers independently try to push (merge) their changes to a project to remote.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"This happens when developers are working on the same code piece and have two different \", mdx(\"code\", null, \"versions\"), \" of that piece.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"This of course is not possible. There can only be ONE version. \"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"They have to choose between the two. \"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Which version is \", mdx(\"i\", null, \"better\"), \"? This is when some orchestration of Git \", mdx(\"code\", null, \"commits\"), \" and \", mdx(\"code\", null, \"merging\"), \" of code to the remote master branch have to come into play.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"With CVCS, you don't have to merge different versions of the same code unless you explicitly want to, so you avoid the trickiness of merging in DVCS.\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"So where Git might take a bit longer to \", mdx(\"code\", null, \"get\"), \" than a CVCS, in the long run, it is very flexible, smart, and intuitive compared to CVC.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, \"Git Isn't Just For Developers\"), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      textAlign: 'center',\n      width: '90%'\n    }\n  }, mdx(\"i\", null, \"Lastly\"), \", I came across a great article on Medium that sums up why Git can be great for everyone. \", mdx(\"i\", null, \"Not\"), \" just developers. It's entitled \", mdx(\"a\", {\n    href: \"https://uiux.blog/designers-who-git-its-worth-it-2cf85877a70b\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    },\n    target: \"_blank\"\n  }, \"Designers who Git. It\\u2019s worth it! My experience with incorporating GIT in my design workflow\"), \".\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Go to link and read a bit from the article. \"), mdx(\"hr\", null), mdx(\"h3\", null, \"Related Resources\"), mdx(\"ul\", {\n    style: {\n      width: '90%'\n    }\n  }, mdx(\"li\", null, mdx(\"a\", {\n    href: \"https://www.redhat.com/en/topics/linux/what-is-the-linux-kernel\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  }, \"What is the Linux kernel?\")), mdx(\"li\", null, mdx(\"a\", {\n    href: \"https://git-scm.com/book/en/v2/\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  }, \"A Short History of Git\")), mdx(\"li\", null, mdx(\"a\", {\n    href: \"https://www.teamstudio.com/blog/distributed-vs-centralized-version-control-systems-for-lotus-notes\",\n    style: {\n      textDecoration: \"none\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  }, \"Distributed vs Centralized Version Control Systems for Lotus Notes\"))), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"b60ed14e-bdf7-5a1b-8e93-665bd3d2bc7f","slug":"","title":"An Intro to Git and Github"}}}